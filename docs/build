#!/usr/bin/env node

/**
 * This example script expects a JSON blob generated by react-docgen as input,
 * e.g. react-docgen src/components/* | docs/build
 */

const fs = require('fs');
const generateMarkdown = require('./generateMarkdown');
const path = require('path');
const _ = require('lodash');

const docgen = require('react-docgen')
const externalProptypesHandler = require('react-docgen-external-proptypes-handler')

const baseDir = __dirname;
const components = [
  'MSAViewer',
  'CanvasComponent',
  'DraggingComponent',
  'Labels',
  'OverviewBar',
  'PositionBar',
  'SequenceOverview',
  'SequenceViewer',
];
const files = components.map(f => `${__dirname}/../src/components/${f}.js`);
const ignoredComponents = [
  'DraggingComponent',
  'CanvasComponent',
];
const componentCache = {};

let metadata = files.map(file => {
  /* append display name handler to handlers list */
  const handlers = docgen.defaultHandlers.concat(externalProptypesHandler(file));

  /* read file to get source code */
  const code = fs.readFileSync(file, 'utf8');

  /* parse the component code to get metadata */
  const data = docgen.parse(code, null, handlers);
  componentCache[getComponentName(file)] = data;
  return data;
})

Object.keys(componentCache).forEach(key => {
  if ("composes" in componentCache[key]) {
      componentCache[key]["composes"].forEach(composes => {
        const composesObject = componentCache[getComponentName(composes)].props;
        componentCache[key].props = _.merge(componentCache[key].props, composesObject);
      });
  }
});

_.difference(components, ignoredComponents).forEach(component => {
  buildComponent(component, componentCache[component]);
});

function buildComponent(filepath, api) {
    var name = getComponentName(filepath);
    var markdown = generateMarkdown(name, api);
    fs.writeFileSync(baseDir + '/' + name + '.md', markdown);
    console.log(generateMarkdown(name, api, 3));
}

function getComponentName(filepath) {
  return path.parse(filepath).name;
}
