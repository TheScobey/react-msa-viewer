#!/usr/bin/env node

/**
 * Run this script to regenerate the documentation.
 */

const fs = require('fs');
const generateMarkdown = require('./generateMarkdown');
const path = require('path');
const _ = require('lodash');
const assert = require('assert');

const docgen = require('react-docgen')
const resolver = docgen.resolver.findAllComponentDefinitions;
const externalProptypesHandler = require('react-docgen-external-proptypes-handler')

const baseDir = __dirname;
const components = [
  'MSAViewer',
  'Canvas/CanvasComponent',
  'Canvas/DraggingComponent',
  'yBars/Labels',
  'Canvas/OverviewBar',
  'xBars/PositionBar',
  'Canvas/SequenceOverview',
  'Canvas/SequenceViewer',
];
const files = components.map(f => `${__dirname}/../src/components/${f}.js`);
// list of all base classes that are extended and whose proptypes should be
// included too
const ignoredComponents = [
  'Canvas/DraggingComponent',
  'Canvas/CanvasComponent',
];
const componentCache = {};

/**
 * Aggregate the component metadata (aka API) from the given files
 */
const metadata = files.map(file => {
  // append display name handler to handlers list
  const handlers = docgen.defaultHandlers.concat(externalProptypesHandler(file));

  // read file to get source code
  const code = fs.readFileSync(file, 'utf8');

  // parse the component code to get metadata
  const data = docgen.parse(code, resolver, handlers);
  assert(data.length, "Warning: more than one exported component found");
  componentCache[getComponentName(file)] = data[0];
  return data;
});

/**
 * Merge the propTypes of the classes they extend into the respective sub classes.
 */
Object.keys(componentCache).forEach(key => {
  if ("composes" in componentCache[key]) {
      componentCache[key]["composes"].forEach(composes => {
        const composesObject = componentCache[getComponentName(composes)].props;
        componentCache[key].props = _.merge(componentCache[key].props, composesObject);
      });
  }
});

/**
 * Generates the markdown documentation for a React component and saves it to disk
 * @param {string} name Name of the component
 * @param {object} api Full API specification object of the component
 */
function saveComponent(api, name) {
  const markdown = generateMarkdown(name, api);
  fs.writeFileSync(baseDir + '/' + name + '.md', markdown);
  return generateMarkdown(name, api, 3);
}

/**
 * Gets a component raw name
 * Example a/b/Foo.js -> Foo
 * @param {string} filepath Path to get the component name from
 */
function getComponentName(filepath) {
  return path.parse(filepath).name;
}

// Build & save the components (except for the ignored ones)
const fullText = _.difference(components, ignoredComponents)
                  .reduce((acc, component) => {
  const name = getComponentName(component);
  return acc + saveComponent(componentCache[getComponentName(component)], name);
}, "");

// Update the README.md in-place
const startTag = "<!-- GENERATED_DOCUMENTATION_START -->";
const endTag = "<!-- GENERATED_DOCUMENTATION_END -->";
const readmeLocation = `${baseDir}/../README.md`;
const textToBeReplaced = `${startTag}
<!-- Run 'npm run docs' to rebuild this -->

${fullText}
${endTag}`;
const readmeText = fs.readFileSync(readmeLocation, 'utf8')
  .replace(new RegExp(`${startTag}[^]*${endTag}`), textToBeReplaced);
fs.writeFileSync(readmeLocation, readmeText, 'utf8');
